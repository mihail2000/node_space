BUGs:

- Creating multiple (=2) new games in a row will crash the server

TODO:

- Implement real API. Should take both access ID as well as username & password combo
- TOP-PRIO: Refactor how starmaps are stored into the database. Using objects of this scale is not wise.
	Couple different ideas:
		1. Use multiple databases: one database per game. Database name could be 'game_1234'
			PROS:
				Can easily shard this across multiple servers
				Locking wouldn't be a problem

			CONS:
				Not sure if there is some kind of scalability problem
				What about data that should be shared across different databases? (actually, this would be problem anyway, if the games are split across multiple servers)

		2. Use multiple collections in one database. Collection names could be 'starmap_<game_id>' e.g. 'starmap_38hfdhfy3ry387'

		3. Enhanced #1: One central database for all users and other shared data that doesn't get updated too often


- Update that frikin session when something happens
- Move some of the core modules around. I.e. core.js should not be in application/controller
- Implement core-level function(s) to check the proper parameters have been passed to API / controller
- Plan API needed
- Rename the matufw_base_model
- Separate game engine (APIs and models) completely from mid-tier (controllers). ...maybe...
- Create server side game loop
- Figure out how to synchronize server side game loop and client side game loop
- Add proper comments to all API and model classes

DONE:
- Move API handling to core controller (or create API core controller, which would be even better)
- Implement ACL control for API
- Refactored how starmaps are stored into the database